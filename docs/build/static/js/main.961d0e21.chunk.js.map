{"version":3,"sources":["MainMap/img.png","Sponsorship/Item/Item.jsx","Sponsorship/Sponsorship.jsx","MainMap/MainMap.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","props","Link","rel","target","href","url","Card","style","height","Grid","padding","container","alignItems","justify","Typography","color","name","isOpen","variant","Sponsorship","backgroundColor","direction","AppBar","position","Toolbar","spacing","item","MainMap","alt","maxWidth","src","img","App","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,iC,0OCkB5BC,MAff,SAAcC,GACZ,OACE,kBAACC,EAAA,EAAD,CAAMC,IAAI,sBAAsBC,OAAO,SAASC,KAAMJ,EAAMK,KACxD,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,OAAQ,SACrB,kBAACC,EAAA,EAAD,CAAMF,MAAO,CAAEG,QAAS,SAAUF,OAAQ,QAAUG,WAAS,EAACC,WAAW,SAASC,QAAQ,iBACxF,kBAACC,EAAA,EAAD,CAAYC,MAAM,WACff,EAAMgB,MAERhB,EAAMiB,OAAS,kBAACH,EAAA,EAAD,CAAYI,QAAQ,QAAQH,MAAM,WAAlC,gBAA8D,kBAACD,EAAA,EAAD,CAAaI,QAAQ,QAAQH,MAAM,aAAnC,oBCc3EI,MArBf,WACE,OACE,kBAACV,EAAA,EAAD,CAAMF,MAAO,CAAEa,gBAAiB,YAAaZ,OAAQ,SAAWG,WAAS,EAACU,UAAU,UAChF,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,oDAEJ,kBAACf,EAAA,EAAD,CAAMF,MAAO,CAAEG,QAAS,QAAUe,QAAS,EAAGd,WAAS,EAACU,UAAU,UAC9D,kBAACZ,EAAA,EAAD,CAAMiB,MAAI,GACN,kBAAC,EAAD,CAAMT,QAAM,EAACD,KAAK,4EAAgBX,IAAI,2CAE1C,kBAACI,EAAA,EAAD,CAAMiB,MAAI,GACN,kBAAC,EAAD,CAAMV,KAAK,sEAAeX,IAAI,2CAElC,kBAACI,EAAA,EAAD,CAAMiB,MAAI,GACN,kBAAC,EAAD,CAAMT,QAAM,EAACD,KAAK,kFAAiBX,IAAI,8C,iBCHxCsB,MAXf,WACE,OACE,kBAAClB,EAAA,EAAD,CAAME,WAAS,EAACU,UAAU,UACtB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,oDAEJ,yBAAKI,IAAI,GAAGrB,MAAO,CAAEsB,SAAU,SAAWC,IAAKC,QCaxCC,MAjBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCHQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.961d0e21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.70600d2f.png\";","import React from 'react';\r\nimport { Card, Grid, Typography, Link } from '@material-ui/core';\r\n\r\nfunction Item(props) {\r\n  return (\r\n    <Link rel=\"noopener noreferrer\" target=\"_blank\" href={props.url}>\r\n        <Card style={{ height: \"4rem\" }}>\r\n          <Grid style={{ padding: \"0 1rem\", height: \"100%\" }} container alignItems=\"center\" justify=\"space-between\" >\r\n            <Typography color=\"primary\">\r\n              {props.name}\r\n            </Typography>\r\n            {props.isOpen ? <Typography variant=\"body1\" color=\"primary\">空席</Typography> : <Typography  variant=\"body1\" color=\"secondary\">満席</Typography>}\r\n          </Grid>\r\n        </Card>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport { Grid, AppBar, Toolbar } from '@material-ui/core';\r\nimport Item from './Item/Item';\r\n\r\nfunction Sponsorship() {\r\n  return (\r\n    <Grid style={{ backgroundColor: \"lightgray\", height: \"100vh\" }} container direction=\"column\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar>トイレ協賛店舗</Toolbar>\r\n        </AppBar>\r\n        <Grid style={{ padding: \"3rem\" }} spacing={4} container direction=\"column\">\r\n            <Grid item>\r\n                <Item isOpen name=\"ポプラ クリスタルプラザ店\" url=\"https://goo.gl/maps/bsxbCYHSRLCQmhxQ9\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Item name=\"ファミリーマート 小町店\" url=\"https://goo.gl/maps/d5ppvVtxwzRFToBF9\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Item isOpen name=\"セブン‐イレブン 広島宝町店\" url=\"https://goo.gl/maps/4LubzaZACBw6SP9A8\" />\r\n            </Grid>\r\n        </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Sponsorship;\r\n","import React from 'react';\r\nimport { Grid, AppBar, Toolbar } from '@material-ui/core';\r\nimport img from \"./img.png\";\r\n\r\nfunction MainMap() {\r\n  return (\r\n    <Grid container direction=\"column\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar>トイレ空き状況</Toolbar>\r\n        </AppBar>\r\n        <img alt=\"\" style={{ maxWidth: '100vw' }} src={img} ></img>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default MainMap;\r\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport Sponsorship from './Sponsorship/Sponsorship';\nimport MainMap from './MainMap/MainMap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/sponsorship\">\n            <Sponsorship />\n          </Route>\n          <Route path=\"/\">\n            <MainMap />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}